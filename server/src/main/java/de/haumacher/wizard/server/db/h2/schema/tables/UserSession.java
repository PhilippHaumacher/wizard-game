/*
 * This file is generated by jOOQ.
 */
package de.haumacher.wizard.server.db.h2.schema.tables;


import de.haumacher.wizard.server.db.h2.schema.Keys;
import de.haumacher.wizard.server.db.h2.schema.Public;
import de.haumacher.wizard.server.db.h2.schema.tables.records.UserSessionRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserSession extends TableImpl<UserSessionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.USER_SESSION</code>
     */
    public static final UserSession USER_SESSION = new UserSession();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserSessionRecord> getRecordType() {
        return UserSessionRecord.class;
    }

    /**
     * The column <code>PUBLIC.USER_SESSION.UID</code>.
     */
    public final TableField<UserSessionRecord, String> UID = createField(DSL.name("UID"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.USER_SESSION.HASH</code>.
     */
    public final TableField<UserSessionRecord, byte[]> HASH = createField(DSL.name("HASH"), SQLDataType.VARBINARY(128).nullable(false), this, "");

    private UserSession(Name alias, Table<UserSessionRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserSession(Name alias, Table<UserSessionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>PUBLIC.USER_SESSION</code> table reference
     */
    public UserSession(String alias) {
        this(DSL.name(alias), USER_SESSION);
    }

    /**
     * Create an aliased <code>PUBLIC.USER_SESSION</code> table reference
     */
    public UserSession(Name alias) {
        this(alias, USER_SESSION);
    }

    /**
     * Create a <code>PUBLIC.USER_SESSION</code> table reference
     */
    public UserSession() {
        this(DSL.name("USER_SESSION"), null);
    }

    public <O extends Record> UserSession(Table<O> child, ForeignKey<O, UserSessionRecord> key) {
        super(child, key, USER_SESSION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<UserSessionRecord> getPrimaryKey() {
        return Keys.USER_SESSION_PK;
    }

    @Override
    public List<ForeignKey<UserSessionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_SESSION_FK);
    }

    private transient Users _users;

    /**
     * Get the implicit join path to the <code>PUBLIC.USERS</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.USER_SESSION_FK);

        return _users;
    }

    @Override
    public UserSession as(String alias) {
        return new UserSession(DSL.name(alias), this);
    }

    @Override
    public UserSession as(Name alias) {
        return new UserSession(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserSession rename(String name) {
        return new UserSession(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserSession rename(Name name) {
        return new UserSession(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, byte[]> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
