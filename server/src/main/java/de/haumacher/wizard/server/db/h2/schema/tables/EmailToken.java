/*
 * This file is generated by jOOQ.
 */
package de.haumacher.wizard.server.db.h2.schema.tables;


import de.haumacher.wizard.server.db.h2.schema.Keys;
import de.haumacher.wizard.server.db.h2.schema.Public;
import de.haumacher.wizard.server.db.h2.schema.tables.records.EmailTokenRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EmailToken extends TableImpl<EmailTokenRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.EMAIL_TOKEN</code>
     */
    public static final EmailToken EMAIL_TOKEN = new EmailToken();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmailTokenRecord> getRecordType() {
        return EmailTokenRecord.class;
    }

    /**
     * The column <code>PUBLIC.EMAIL_TOKEN.UID</code>.
     */
    public final TableField<EmailTokenRecord, String> UID = createField(DSL.name("UID"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.EMAIL_TOKEN.EMAIL</code>.
     */
    public final TableField<EmailTokenRecord, byte[]> EMAIL = createField(DSL.name("EMAIL"), SQLDataType.VARBINARY(128).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.EMAIL_TOKEN.HASH</code>.
     */
    public final TableField<EmailTokenRecord, byte[]> HASH = createField(DSL.name("HASH"), SQLDataType.VARBINARY(128).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.EMAIL_TOKEN.NOT_AFTER</code>.
     */
    public final TableField<EmailTokenRecord, Long> NOT_AFTER = createField(DSL.name("NOT_AFTER"), SQLDataType.BIGINT.nullable(false), this, "");

    private EmailToken(Name alias, Table<EmailTokenRecord> aliased) {
        this(alias, aliased, null);
    }

    private EmailToken(Name alias, Table<EmailTokenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>PUBLIC.EMAIL_TOKEN</code> table reference
     */
    public EmailToken(String alias) {
        this(DSL.name(alias), EMAIL_TOKEN);
    }

    /**
     * Create an aliased <code>PUBLIC.EMAIL_TOKEN</code> table reference
     */
    public EmailToken(Name alias) {
        this(alias, EMAIL_TOKEN);
    }

    /**
     * Create a <code>PUBLIC.EMAIL_TOKEN</code> table reference
     */
    public EmailToken() {
        this(DSL.name("EMAIL_TOKEN"), null);
    }

    public <O extends Record> EmailToken(Table<O> child, ForeignKey<O, EmailTokenRecord> key) {
        super(child, key, EMAIL_TOKEN);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<EmailTokenRecord> getPrimaryKey() {
        return Keys.EMAIL_TOKEN_PK;
    }

    @Override
    public EmailToken as(String alias) {
        return new EmailToken(DSL.name(alias), this);
    }

    @Override
    public EmailToken as(Name alias) {
        return new EmailToken(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EmailToken rename(String name) {
        return new EmailToken(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EmailToken rename(Name name) {
        return new EmailToken(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, byte[], byte[], Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
